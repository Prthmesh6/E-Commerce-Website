{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\suraj\\\\OneDrive\\\\Desktop\\\\Projects\\\\Ecom\\\\frontend\\\\src\\\\Screens\\\\ProfileScreen.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { Table, Form, Button, Row, Col } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { getUserDetails, updateUserProfile } from \"../actions/userAction\";\nimport { USER_UPDATE_PROFILE_RESET } from \"../constants/userConstant\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProfileScreen = () => {\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"hellow\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 10\n  }, this);\n}; // const ProfileScreen = () => {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const [name, setName] = useState(\"\");\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [confirmPassword, setConfirmPassword] = useState(\"\");\n//   const [message, setMessage] = useState(null);\n//   const dispatch = useDispatch();\n//   const userDetails = useSelector((state) => state.userDetails);\n//   const { loading, error, user } = userDetails;\n//   const userLogin = useSelector((state) => state.userLogin);\n//   const { userInfo } = userLogin;\n//   const userUpdateProfile = useSelector((state) => state.userUpdateProfile);\n//   const { success } = userUpdateProfile;\n//   const orderListMy = useSelector((state) => state.orderListMy);\n//   const { loading: loadingOrders, error: errorOrders, orders } = orderListMy;\n//   useEffect(() => {\n//     if (!userInfo) {\n//       navigate(\"/login\");\n//     } else {\n//       if (!user || !user.name || success) {\n//         dispatch({ type: USER_UPDATE_PROFILE_RESET });\n//         dispatch(getUserDetails(\"profile\"));\n//       } else {\n//         setName(user.name);\n//         setEmail(user.email);\n//       }\n//     }\n//   }, [dispatch, navigate, userInfo, user, success]);\n//   const submitHandler = (e) => {\n//     e.preventDefault();\n//     if (password !== confirmPassword) {\n//       setMessage(\"Passwords do not match\");\n//     } else {\n//       dispatch(updateUserProfile({ id: user._id, name, email, password }));\n//     }\n//   };\n//   return (\n//     <Row>\n//       <Col md={3}>\n//         <h2>User Profile</h2>\n//         {message && <Message variant=\"danger\">{message}</Message>}\n//         {}\n//         {success && <Message variant=\"success\">Profile Updated</Message>}\n//         {loading ? (\n//           <Loader />\n//         ) : error ? (\n//           <Message variant=\"danger\">{error}</Message>\n//         ) : (\n//           <Form onSubmit={submitHandler}>\n//             <Form.Group controlId=\"name\">\n//               <Form.Label>Name</Form.Label>\n//               <Form.Control\n//                 type=\"name\"\n//                 placeholder=\"Enter name\"\n//                 value={name}\n//                 onChange={(e) => setName(e.target.value)}\n//               ></Form.Control>\n//             </Form.Group>\n//             <Form.Group controlId=\"email\">\n//               <Form.Label>Email Address</Form.Label>\n//               <Form.Control\n//                 type=\"email\"\n//                 placeholder=\"Enter email\"\n//                 value={email}\n//                 onChange={(e) => setEmail(e.target.value)}\n//               ></Form.Control>\n//             </Form.Group>\n//             <Form.Group controlId=\"password\">\n//               <Form.Label>Password</Form.Label>\n//               <Form.Control\n//                 type=\"password\"\n//                 placeholder=\"Enter password\"\n//                 value={password}\n//                 onChange={(e) => setPassword(e.target.value)}\n//               ></Form.Control>\n//             </Form.Group>\n//             <Form.Group controlId=\"confirmPassword\">\n//               <Form.Label>Confirm Password</Form.Label>\n//               <Form.Control\n//                 type=\"password\"\n//                 placeholder=\"Confirm password\"\n//                 value={confirmPassword}\n//                 onChange={(e) => setConfirmPassword(e.target.value)}\n//               ></Form.Control>\n//             </Form.Group>\n//             <Button type=\"submit\" variant=\"primary\">\n//               Update\n//             </Button>\n//           </Form>\n//         )}\n//       </Col>\n//       <Col md={9}>\n//         <h2>My Orders</h2>\n//       </Col>\n//     </Row>\n//   );\n// };\n\n\n_c = ProfileScreen;\nexport default ProfileScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileScreen\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","Table","Form","Button","Row","Col","LinkContainer","useDispatch","useSelector","Message","Loader","getUserDetails","updateUserProfile","USER_UPDATE_PROFILE_RESET","ProfileScreen"],"sources":["C:/Users/suraj/OneDrive/Desktop/Projects/Ecom/frontend/src/Screens/ProfileScreen.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { Table, Form, Button, Row, Col } from \"react-bootstrap\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Message from \"../components/Message\";\r\nimport Loader from \"../components/Loader\";\r\nimport { getUserDetails, updateUserProfile } from \"../actions/userAction\";\r\nimport { USER_UPDATE_PROFILE_RESET } from \"../constants/userConstant\";\r\n\r\nconst ProfileScreen = () => {\r\n  return <h1>hellow</h1>;\r\n};\r\n\r\n// const ProfileScreen = () => {\r\n//   const location = useLocation();\r\n//   const navigate = useNavigate();\r\n//   const [name, setName] = useState(\"\");\r\n//   const [email, setEmail] = useState(\"\");\r\n//   const [password, setPassword] = useState(\"\");\r\n//   const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n//   const [message, setMessage] = useState(null);\r\n\r\n//   const dispatch = useDispatch();\r\n\r\n//   const userDetails = useSelector((state) => state.userDetails);\r\n//   const { loading, error, user } = userDetails;\r\n\r\n//   const userLogin = useSelector((state) => state.userLogin);\r\n//   const { userInfo } = userLogin;\r\n\r\n//   const userUpdateProfile = useSelector((state) => state.userUpdateProfile);\r\n//   const { success } = userUpdateProfile;\r\n\r\n//   const orderListMy = useSelector((state) => state.orderListMy);\r\n//   const { loading: loadingOrders, error: errorOrders, orders } = orderListMy;\r\n\r\n//   useEffect(() => {\r\n//     if (!userInfo) {\r\n//       navigate(\"/login\");\r\n//     } else {\r\n//       if (!user || !user.name || success) {\r\n//         dispatch({ type: USER_UPDATE_PROFILE_RESET });\r\n//         dispatch(getUserDetails(\"profile\"));\r\n//       } else {\r\n//         setName(user.name);\r\n//         setEmail(user.email);\r\n//       }\r\n//     }\r\n//   }, [dispatch, navigate, userInfo, user, success]);\r\n\r\n//   const submitHandler = (e) => {\r\n//     e.preventDefault();\r\n//     if (password !== confirmPassword) {\r\n//       setMessage(\"Passwords do not match\");\r\n//     } else {\r\n//       dispatch(updateUserProfile({ id: user._id, name, email, password }));\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Row>\r\n//       <Col md={3}>\r\n//         <h2>User Profile</h2>\r\n//         {message && <Message variant=\"danger\">{message}</Message>}\r\n//         {}\r\n//         {success && <Message variant=\"success\">Profile Updated</Message>}\r\n//         {loading ? (\r\n//           <Loader />\r\n//         ) : error ? (\r\n//           <Message variant=\"danger\">{error}</Message>\r\n//         ) : (\r\n//           <Form onSubmit={submitHandler}>\r\n//             <Form.Group controlId=\"name\">\r\n//               <Form.Label>Name</Form.Label>\r\n//               <Form.Control\r\n//                 type=\"name\"\r\n//                 placeholder=\"Enter name\"\r\n//                 value={name}\r\n//                 onChange={(e) => setName(e.target.value)}\r\n//               ></Form.Control>\r\n//             </Form.Group>\r\n\r\n//             <Form.Group controlId=\"email\">\r\n//               <Form.Label>Email Address</Form.Label>\r\n//               <Form.Control\r\n//                 type=\"email\"\r\n//                 placeholder=\"Enter email\"\r\n//                 value={email}\r\n//                 onChange={(e) => setEmail(e.target.value)}\r\n//               ></Form.Control>\r\n//             </Form.Group>\r\n\r\n//             <Form.Group controlId=\"password\">\r\n//               <Form.Label>Password</Form.Label>\r\n//               <Form.Control\r\n//                 type=\"password\"\r\n//                 placeholder=\"Enter password\"\r\n//                 value={password}\r\n//                 onChange={(e) => setPassword(e.target.value)}\r\n//               ></Form.Control>\r\n//             </Form.Group>\r\n\r\n//             <Form.Group controlId=\"confirmPassword\">\r\n//               <Form.Label>Confirm Password</Form.Label>\r\n//               <Form.Control\r\n//                 type=\"password\"\r\n//                 placeholder=\"Confirm password\"\r\n//                 value={confirmPassword}\r\n//                 onChange={(e) => setConfirmPassword(e.target.value)}\r\n//               ></Form.Control>\r\n//             </Form.Group>\r\n\r\n//             <Button type=\"submit\" variant=\"primary\">\r\n//               Update\r\n//             </Button>\r\n//           </Form>\r\n//         )}\r\n//       </Col>\r\n//       <Col md={9}>\r\n//         <h2>My Orders</h2>\r\n//       </Col>\r\n//     </Row>\r\n//   );\r\n// };\r\n\r\nexport default ProfileScreen;\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,kBAAzC;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,GAAnC,QAA8C,iBAA9C;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,uBAAlD;AACA,SAASC,yBAAT,QAA0C,2BAA1C;;;AAEA,MAAMC,aAAa,GAAG,MAAM;EAC1B,oBAAO;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAFD,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAlHMA,a;AAoHN,eAAeA,aAAf"},"metadata":{},"sourceType":"module"}