{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button, Row, Col, ListGroup, Image, Card } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport CheckOutSteps from \"../components/Checkoutsteps\";\nimport { Link } from \"react-router-dom\";\nimport { createOrder } from \"../actions/orderActions\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PlaceOrderScreen = () => {\n  _s();\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const cart = useSelector(state => state.cart); //  Calculate Prices\n\n  cart.itemsPrice = cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0);\n  cart.shippingPrice = cart.itemsPrice > 100 ? 0 : 100;\n  cart.taxPrice = Number((0.15 * cart.itemsPrice).toFixed(2));\n  cart.totalPrice = Number((cart.itemsPrice + cart.shippingPrice + cart.taxPrice).toFixed(2));\n  const orderCreate = useSelector(state => state.orderCreate);\n  const {\n    order,\n    success,\n    error\n  } = orderCreate;\n  useEffect(() => {\n    if (success) {\n      navigate(`/order/${order._id}`);\n    } // eslint-disable-next-line\n\n  }, [navigate, success, order]);\n\n  const placeOrderHandler = () => {\n    dispatch(createOrder({\n      orderItems: cart.cartItems,\n      shippingAddress: cart.shippingAddress,\n      paymentMethod: cart.paymentMethod.paymentMethod,\n      itemsPrice: cart.itemsPrice,\n      shippingPrice: cart.shippingPrice,\n      taxPrice: cart.taxPrice,\n      totalPrice: cart.totalPrice\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(PlaceOrderScreen, \"Wo7Ua0LT/Bj/Cu2yUUVWier1Gw0=\", false, function () {\n  return [useNavigate, useDispatch, useSelector, useSelector];\n});\n\n_c = PlaceOrderScreen;\nexport default PlaceOrderScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaceOrderScreen\");","map":{"version":3,"names":["React","useEffect","useNavigate","Button","Row","Col","ListGroup","Image","Card","useDispatch","useSelector","Message","CheckOutSteps","Link","createOrder","PlaceOrderScreen","navigate","dispatch","cart","state","itemsPrice","cartItems","reduce","acc","item","price","qty","shippingPrice","taxPrice","Number","toFixed","totalPrice","orderCreate","order","success","error","_id","placeOrderHandler","orderItems","shippingAddress","paymentMethod"],"sources":["C:/Users/suraj/OneDrive/Desktop/Projects/Ecom/frontend/src/Screens/PlaceOrderScreen.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Button, Row, Col, ListGroup, Image, Card } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Message from \"../components/Message\";\r\nimport CheckOutSteps from \"../components/Checkoutsteps\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { createOrder } from \"../actions/orderActions\";\r\n\r\nconst PlaceOrderScreen = () => {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  const cart = useSelector((state) => state.cart);\r\n\r\n  //  Calculate Prices\r\n  cart.itemsPrice = cart.cartItems.reduce(\r\n    (acc, item) => acc + item.price * item.qty,\r\n    0\r\n  );\r\n\r\n  cart.shippingPrice = cart.itemsPrice > 100 ? 0 : 100;\r\n\r\n  cart.taxPrice = Number((0.15 * cart.itemsPrice).toFixed(2));\r\n\r\n  cart.totalPrice = Number(\r\n    (cart.itemsPrice + cart.shippingPrice + cart.taxPrice).toFixed(2)\r\n  );\r\n\r\n  const orderCreate = useSelector((state) => state.orderCreate);\r\n  const { order, success, error } = orderCreate;\r\n\r\n  useEffect(() => {\r\n    if (success) {\r\n      navigate(`/order/${order._id}`);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [navigate, success, order]);\r\n\r\n  const placeOrderHandler = () => {\r\n    dispatch(\r\n      createOrder({\r\n        orderItems: cart.cartItems,\r\n        shippingAddress: cart.shippingAddress,\r\n        paymentMethod: cart.paymentMethod.paymentMethod,\r\n        itemsPrice: cart.itemsPrice,\r\n        shippingPrice: cart.shippingPrice,\r\n        taxPrice: cart.taxPrice,\r\n        totalPrice: cart.totalPrice,\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <CheckOutSteps step1 step2 step3 step4 />\r\n      <Row>\r\n        <Col md={8}>\r\n          <ListGroup variant=\"flush\">\r\n            <ListGroup.Item>\r\n              <h2>Shipping</h2>\r\n              <p>\r\n                <strong> Addrenss: </strong>\r\n                {cart.shippingAddress.address},{cart.shippingAddress.city},{\" \"}\r\n                {cart.shippingAddress.postalCode},{\" \"}\r\n                {cart.shippingAddress.country}\r\n              </p>\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h2>Payment Method</h2>\r\n              <strong>Method : </strong>\r\n              {cart.paymentMethod.paymentMethod}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h2>Order Items</h2>\r\n              {cart.cartItems.length === 0 ? (\r\n                <Message> Your Cart is Empty</Message>\r\n              ) : (\r\n                <ListGroup variant=\"flush\">\r\n                  {cart.cartItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        <Col md={1}>\r\n                          <Image\r\n                            src={item.image}\r\n                            alt={item.name}\r\n                            fluid\r\n                            rounded\r\n                          ></Image>\r\n                        </Col>\r\n                        <Col>\r\n                          <Link to={`/product/${item.product}`}>\r\n                            {item.name}\r\n                          </Link>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          {item.qty} X ${item.price} = ${item.qty * item.price}{\" \"}\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  ))}{\" \"}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card>\r\n            <ListGroup variant=\"flush\">\r\n              <ListGroup.Item>\r\n                <h2>Order Summary</h2>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Items</Col>\r\n                  <Col> ${cart.itemsPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Shipping</Col>\r\n                  <Col> ${cart.shippingPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Tax</Col>\r\n                  <Col> ${cart.taxPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Total</Col>\r\n                  <Col> ${cart.totalPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                {error && <Message variant=\"danger\">{error}</Message>}\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Button\r\n                    type=\"button\"\r\n                    className=\"btn-block\"\r\n                    disabled={cart.cartItems === 0}\r\n                    onClick={placeOrderHandler}\r\n                  >\r\n                    Place Order\r\n                  </Button>\r\n                </Row>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlaceOrderScreen;\r\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA2BC,SAA3B,EAAsCC,KAAtC,EAA6CC,IAA7C,QAAyD,iBAAzD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,WAAT,QAA4B,yBAA5B;;;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;EAAA;;EAC7B,MAAMC,QAAQ,GAAGd,WAAW,EAA5B;EACA,MAAMe,QAAQ,GAAGR,WAAW,EAA5B;EAEA,MAAMS,IAAI,GAAGR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACD,IAAlB,CAAxB,CAJ6B,CAM7B;;EACAA,IAAI,CAACE,UAAL,GAAkBF,IAAI,CAACG,SAAL,CAAeC,MAAf,CAChB,CAACC,GAAD,EAAMC,IAAN,KAAeD,GAAG,GAAGC,IAAI,CAACC,KAAL,GAAaD,IAAI,CAACE,GADvB,EAEhB,CAFgB,CAAlB;EAKAR,IAAI,CAACS,aAAL,GAAqBT,IAAI,CAACE,UAAL,GAAkB,GAAlB,GAAwB,CAAxB,GAA4B,GAAjD;EAEAF,IAAI,CAACU,QAAL,GAAgBC,MAAM,CAAC,CAAC,OAAOX,IAAI,CAACE,UAAb,EAAyBU,OAAzB,CAAiC,CAAjC,CAAD,CAAtB;EAEAZ,IAAI,CAACa,UAAL,GAAkBF,MAAM,CACtB,CAACX,IAAI,CAACE,UAAL,GAAkBF,IAAI,CAACS,aAAvB,GAAuCT,IAAI,CAACU,QAA7C,EAAuDE,OAAvD,CAA+D,CAA/D,CADsB,CAAxB;EAIA,MAAME,WAAW,GAAGtB,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACa,WAAlB,CAA/B;EACA,MAAM;IAAEC,KAAF;IAASC,OAAT;IAAkBC;EAAlB,IAA4BH,WAAlC;EAEA/B,SAAS,CAAC,MAAM;IACd,IAAIiC,OAAJ,EAAa;MACXlB,QAAQ,CAAE,UAASiB,KAAK,CAACG,GAAI,EAArB,CAAR;IACD,CAHa,CAId;;EACD,CALQ,EAKN,CAACpB,QAAD,EAAWkB,OAAX,EAAoBD,KAApB,CALM,CAAT;;EAOA,MAAMI,iBAAiB,GAAG,MAAM;IAC9BpB,QAAQ,CACNH,WAAW,CAAC;MACVwB,UAAU,EAAEpB,IAAI,CAACG,SADP;MAEVkB,eAAe,EAAErB,IAAI,CAACqB,eAFZ;MAGVC,aAAa,EAAEtB,IAAI,CAACsB,aAAL,CAAmBA,aAHxB;MAIVpB,UAAU,EAAEF,IAAI,CAACE,UAJP;MAKVO,aAAa,EAAET,IAAI,CAACS,aALV;MAMVC,QAAQ,EAAEV,IAAI,CAACU,QANL;MAOVG,UAAU,EAAEb,IAAI,CAACa;IAPP,CAAD,CADL,CAAR;EAWD,CAZD;;EAcA,oBACE,qCADF;AA6GD,CAzJD;;GAAMhB,gB;UACab,W,EACAO,W,EAEJC,W,EAgBOA,W;;;KApBhBK,gB;AA2JN,eAAeA,gBAAf"},"metadata":{},"sourceType":"module"}